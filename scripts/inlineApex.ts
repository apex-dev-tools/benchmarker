/*
 * Copyright (c) 2025 Certinia Inc. All rights reserved.
 */

import ts from 'typescript';
import fs from 'node:fs/promises';
import path from 'node:path';

const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });
const source = ts.createSourceFile('', '', ts.ScriptTarget.ES2020);

function createExport(name: string, content: string): string {
  // generates a `export const name: string = 'content';` statement
  // see https://ts-ast-viewer.com/
  const node = ts.factory.createVariableStatement(
    [ts.factory.createToken(ts.SyntaxKind.ExportKeyword)],
    ts.factory.createVariableDeclarationList(
      [
        ts.factory.createVariableDeclaration(
          ts.factory.createIdentifier(name),
          undefined,
          ts.factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
          ts.factory.createStringLiteral(content, true)
        ),
      ],
      ts.NodeFlags.Const
    )
  );

  return printer.printNode(ts.EmitHint.Unspecified, node, source);
}

const dir = import.meta.dirname;
const apexDir = path.join(dir, './apex');
const formatRegex = /[\t\n]+/g;

let contents = `/*
 * Copyright (c) 2025 Certinia Inc. All rights reserved.
 */

// This file was generated by 'scripts/inlineApex.ts'.
// Execute 'npm run compile:apex' to regenerate from 'scripts/apex'.
`;

for (const file of await fs.readdir(apexDir)) {
  const apex = await fs.readFile(path.join(apexDir, file), {
    encoding: 'utf8',
  });
  const name = file.split('.', 2).at(0)?.toLowerCase();

  if (name) {
    contents += `\n${createExport(`${name}Apex`, apex.replaceAll(formatRegex, ' '))}\n`;
  }
}

await fs.writeFile(path.join(dir, '../src/scripts/apex.ts'), contents, {
  flag: 'w',
});
