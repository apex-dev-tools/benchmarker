/*
 * Copyright (c) 2025 Certinia Inc. All rights reserved.
 */

// This file was generated by 'scripts/inlineApex.ts'.
// Execute 'npm run compile:apex' to regenerate from 'scripts/apex'.

export const benchmarkApex: string =
  "GovernorLimits limitsbench_initial; GovernorLimits limitsbench_diff; void benchmark(String name) {} void describe(String action) {} void start() { limitsbench_initial = (new GovernorLimits()).getCurrentGovernorLimits(); } void stop() { limitsbench_diff = (new GovernorLimits()).getLimitsDiff(limitsbench_initial, (new GovernorLimits()).getCurrentGovernorLimits()); } void done() { System.assert(false, '-_' + JSON.serialize(limitsbench_diff) + '_-'); } ";

export const infoApex: string =
  "public class OrgInformation { public String id; public String instance; public String edition; public Boolean isSandbox; public Boolean isTrial; public Boolean isMultiCurrency; public Boolean isLex; } OrgInformation org = new OrgInformation(); Organization o = [ SELECT Id, InstanceName, IsSandbox, OrganizationType, TrialExpirationDate FROM Organization LIMIT 1 ]; User u = [ SELECT UserPreferencesLightningExperiencePreferred FROM User WHERE Id = :UserInfo.getUserId() LIMIT 1 ]; org.id = o.Id; org.instance = o.InstanceName; org.edition = o.OrganizationType; org.isSandbox = o.IsSandbox; org.isTrial = !o.IsSandbox && o.TrialExpirationDate != null; org.isMultiCurrency = UserInfo.isMultiCurrencyOrganization(); org.isLex = u.UserPreferencesLightningExperiencePreferred; System.assert(false, '-_' + JSON.serialize(org) + '_-'); ";

export const limitsApex: string =
  'public class GovernorLimits { private Integer duration, cpuTime, dmlRows, dmlStatements, heapSize, queryRows, soqlQueries, queueableJobs, futureCalls; public GovernorLimits getCurrentGovernorLimits() { this.duration = (Integer)Datetime.now().getTime(); this.cpuTime = Limits.getCpuTime(); this.dmlRows = Limits.getDMLRows(); this.dmlStatements = Limits.getDMLStatements(); this.heapSize = Limits.getHeapSize(); this.queryRows = Limits.getQueryRows(); this.soqlQueries = Limits.getQueries(); this.queueableJobs = Limits.getQueueableJobs(); this.futureCalls = Limits.getFutureCalls(); return this; } public GovernorLimits getLimitsDiff(GovernorLimits govLim1, GovernorLimits govLim2) { this.duration = govLim2.duration - govLim1.duration; this.cpuTime = govLim2.cpuTime - govLim1.cpuTime; this.dmlRows = govLim2.dmlRows - govLim1.dmlRows; this.dmlStatements = govLim2.dmlStatements - govLim1.dmlStatements; this.heapSize = govLim2.heapSize - govLim1.heapSize; this.queryRows = govLim2.queryRows - govLim1.queryRows; this.soqlQueries = govLim2.soqlQueries - govLim1.soqlQueries; this.queueableJobs = govLim2.queueableJobs - govLim1.queueableJobs; this.futureCalls = govLim2.futureCalls - govLim1.futureCalls; return this; } } ';
